<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.member.dao.MemberDAO">
	<insert id="insertMember" parameterType="MemberVO">
		INSERT INTO MEMBER (                                                                     
		    MEM_ID, MEM_PASS, MEM_NAME, MEM_REGNO1, MEM_REGNO2, MEM_BIR,                    
		    MEM_ZIP, MEM_ADD1, MEM_ADD2, MEM_HOMETEL, MEM_COMTEL, MEM_HP, MEM_MAIL, MEM_JOB,
		    MEM_LIKE, MEM_MEMORIAL, MEM_MEMORIALDAY , MEM_ROLE 
		    <if test="memImg!=null and memImg.length gt 0">
		    , MEM_IMG          
		    </if>
		) VALUES ( 
				#{memId, jdbcType=VARCHAR},
				#{memPass, jdbcType=VARCHAR}, 
				#{memName, jdbcType=VARCHAR}, 
				#{memRegno1, jdbcType=CHAR},
				#{memRegno2, jdbcType=CHAR},
				TO_DATE(#{memBir, jdbcType=DATE}, 'YYYY-MM-DD'),
				#{memZip, jdbcType=CHAR},
				#{memAdd1, jdbcType=VARCHAR},
				#{memAdd2, jdbcType=VARCHAR}, 
				#{memHometel, jdbcType=VARCHAR},
				#{memComtel, jdbcType=VARCHAR}, 
				#{memHp, jdbcType=VARCHAR},
				#{memMail, jdbcType=VARCHAR},
				#{memJob, jdbcType=VARCHAR},  
				#{memLike, jdbcType=VARCHAR},
				#{memMemorial, jdbcType=VARCHAR},
				TO_DATE(#{memMemorialday, jdbcType=DATE}, 'YYYY-MM-DD'),
				'ROLE_USER'
				<if test="memImg!=null and memImg.length gt 0">
				, #{memImg, jdbcType=BLOB} 
		   		</if>
		 )                                                                                   
	</insert>
	
	<select id="selectMemberById" parameterType="string" resultType="MemberVO">
		SELECT MEM_ID, MEM_PASS, MEM_NAME  , MEM_ROLE, MEM_IMG
		FROM MEMBER  
		WHERE MEM_ID = #{memId}
		AND MEM_DELETE IS NULL
	</select>
	
	<sql id="searchFrag"> 
		<where>
				<if test="simpleSearch!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(simpleSearch.searchWord)">
					<choose> 
						<when test="simpleSearch.searchType eq 'name'">
							INSTR(MEM_NAME, #{simpleSearch.searchWord}) > 0 
						</when>
						<when test="simpleSearch.searchType eq 'address'">
							INSTR(MEM_ADD1, #{simpleSearch.searchWord}) > 0 
						</when>
						<when test="simpleSearch.searchType eq 'hp'">
							INSTR(MEM_HP, #{simpleSearch.searchWord}) > 0 
						</when>
						<otherwise>
							INSTR(MEM_NAME, #{simpleSearch.searchWord}) > 0 
							OR INSTR(MEM_ADD1, #{simpleSearch.searchWord}) > 0 
							OR INSTR(MEM_HP, #{simpleSearch.searchWord}) > 0 
						</otherwise>
					</choose>
				</if> 
			</where>	 
	</sql>
	
	<select id="selectTotalRecord" parameterType="PagingVO" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER 
		<include refid="searchFrag"/>
	</select>
	
	<select id="selectMemberList" resultType="MemberVO" parameterType="PagingVO">
		SELECT B.*
		FROM (
			SELECT A.*, ROWNUM AS RNUM
			FROM (
			SELECT
			MEM_ID, MEM_NAME, MEM_ADD1, MEM_ADD2, MEM_HP,
			MEM_MAIL, MEM_MILEAGE, MEM_DELETE
			FROM MEMBER
			<include refid="searchFrag"/>
			ORDER BY ROWID DESC
			) A
		) B
		<![CDATA[ 
		WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
		]]>
	</select>  
	<resultMap type="MemberVO" id="memberMap" autoMapping="true">
		<!--id는 식별성이 있는 property  -->
		<id property="memId" column="MEM_ID"/> 
		<!-- has many 관계  => collection -->
		<collection property="prodList" javaType="java.util.Set" ofType="ProdVO" autoMapping="true">
			<id property="prodId" column="PROD_ID"/> 
			<!-- has a 관계  => association -->
			<association property="buyer" autoMapping="true"></association>
		</collection>
	</resultMap>
	<select id="selectMemberDetail" parameterType="string" resultMap="memberMap">
		WITH PRODALL AS (
			SELECT PROD_ID, PROD_COST, PROD_SALE, LPROD_NM, BUYER_NAME, BUYER_ADD1,PROD_MILEAGE, PROD_NAME
			FROM PROD INNER JOIN LPROD ON(PROD_LGU = LPROD_GU)
			INNER JOIN BUYER ON (PROD_BUYER = BUYER_ID) 
		), CARTPROD AS(
			SELECT DISTINCT CART_MEMBER, PRODALL.*
			FROM CART INNER JOIN PRODALL ON (CART_PROD = PROD_ID)
		)

		SELECT
		MEM_ID, MEM_PASS, MEM_NAME, TO_CHAR(MEM_BIR, 'YYYY-MM-DD') AS MEM_BIR,
		MEM_REGNO1, MEM_REGNO2,
		MEM_ZIP, MEM_ADD1, MEM_ADD2, MEM_HOMETEL, MEM_COMTEL, MEM_HP, MEM_MAIL,
		MEM_JOB,
		MEM_LIKE, MEM_MEMORIAL, TO_CHAR(MEM_MEMORIALDAY, 'YYYY-MM-DD') AS
		MEM_MEMORIALDAY, MEM_MILEAGE, MEM_DELETE, MEM_ROLE, MEM_IMG
		, CARTPROD.* 
		FROM MEMBER LEFT OUTER JOIN CARTPROD ON (MEM_ID = CART_MEMBER)
		WHERE MEM_ID = #{mem_id}                                                 
	</select>
	<update id="updateMember" parameterType="MemberVO">
		UPDATE MEMBER
		SET
		<!--null데이터처리 jdbcType=VARCHAR -->
		MEM_NAME = #{memName, jdbcType=VARCHAR} 
		, MEM_ZIP = #{memZip, jdbcType=CHAR}
		, MEM_ADD1 = #{memAdd1, jdbcType=VARCHAR}
		, MEM_ADD2 = #{memAdd2, jdbcType=VARCHAR}
		, MEM_HOMETEL = #{memHometel, jdbcType=VARCHAR}
		, MEM_COMTEL= #{memComtel, jdbcType=VARCHAR}
		, MEM_HP = #{memHp, jdbcType=VARCHAR}
		, MEM_MAIL = #{memMail, jdbcType=VARCHAR}
		, MEM_JOB = #{memJob, jdbcType=VARCHAR} 
		, MEM_LIKE = #{memLike, jdbcType=VARCHAR} 
		, MEM_MEMORIAL = #{memMemorial, jdbcType=VARCHAR} 
		, MEM_MEMORIALDAY = TO_DATE(#{memMemorialday, jdbcType=DATE}, 'YYYY-MM-DD')
		<if test="memImg!=null and memImg.length gt 0">
		, MEM_IMG = #{memImg, jdbcType=BLOB}
		</if> 
		WHERE 
		MEM_ID = #{memId}
	</update>
	<delete id="deleteMember" parameterType="string">
		UPDATE MEMBER 
		SET 
		MEM_DELETE = '1'
		WHERE MEM_ID = #{mem_id}
	</delete>
	
	<select id="searhZipList" resultType="ZipVO">
		SELECT
	    ZIPCODE,  SIDO,  GUGUN,
	    DONG,  BUNJI
		FROM  ZIPTB 
	</select>
</mapper> 